/**
 * @param {number[][]} intervals
 * @param {number[]} newInterval
 * @return {number[][]}
 */
var insert = function(intervals, newInterval) {
  //loop through the intervals array
  //determine where the newInterval[0] falls — if it's between the bounds of intervals[i][0] && intervals[i][1]
  //make that interval Math.min(newInterval[0], intervals[i][0]), Math.max(newInterval[1], intervals[i][0])
  //then mergeIntervals
  if (intervals.length === 0) {
    intervals.push(newInterval)
    return intervals
  }
  
  for (let i = 0; i < intervals.length; i++) {
    if (newInterval[0] <= intervals[i][1] && newInterval[1] >= intervals[i][0]) {
      intervals[i] = [Math.min(intervals[i][0], newInterval[0]), Math.max(intervals[i][1], newInterval[1])]
      break;
    } else {
      intervals.push(newInterval)
    }
  }
  
  intervals.sort((a, b) => a[0] - b[0])
  
  let currentInterval = intervals[0]
  let res = [currentInterval]
  
  for (let j = 1; j < intervals.length; j++) {
    let currStart = currentInterval[0]
    let currEnd = currentInterval[1]
    let nextStart = intervals[j][0]
    let nextEnd = intervals[j][1]
    
    if (currEnd >= nextStart) {
      currentInterval[1] = Math.max(currEnd, nextEnd)
    } else {
      currentInterval = intervals[j]
      res.push(currentInterval)
    }
  }
  
  return res
}
